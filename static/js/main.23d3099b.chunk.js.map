{"version":3,"sources":["api/users.ts","api/todos.ts","components/UserInfo/UserInfo.tsx","components/TodoInfo/TodoInfo.tsx","components/TodoList/TodoList.tsx","App.tsx","index.tsx"],"names":["id","name","username","email","title","completed","userId","UserInfo","user","className","href","TodoInfo","todo","cn","TodoList","todos","map","App","useState","selectedUserId","setSelectedUserId","typedTitle","setTypedTitle","todosFromServer","todosList","setTodosList","hasTitleError","setHasTitleError","hasNameError","setHasNameError","action","method","htmlFor","value","onChange","event","target","type","placeholder","defaultValue","disabled","usersFromServer","onClick","preventDefault","maxId","Math","max","newTodo","prevTodos","find","u","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.23d3099b.chunk.js","sourcesContent":["export default [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    username: 'Bret',\n    email: 'Sincere@april.biz',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    username: 'Antonette',\n    email: 'Shanna@melissa.tv',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    username: 'Samantha',\n    email: 'Nathan@yesenia.net',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    username: 'Karianne',\n    email: 'Julianne.OConner@kory.org',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    username: 'Kamren',\n    email: 'Lucio_Hettinger@annie.ca',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    username: 'Leopoldo_Corkery',\n    email: 'Karley_Dach@jasper.info',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    username: 'Elwyn.Skiles',\n    email: 'Telly.Hoeger@billy.biz',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    username: 'Maxime_Nienow',\n    email: 'Sherwood@rosamond.me',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    username: 'Delphine',\n    email: 'Chaim_McDermott@dana.io',\n  },\n  {\n    id: 10,\n    name: 'Clementina DuBuque',\n    username: 'Moriah.Stanton',\n    email: 'Rey.Padberg@karina.biz',\n  },\n];\n","export default [\n  {\n    id: 1,\n    title: 'delectus aut autem',\n    completed: true,\n    userId: 1,\n  },\n  {\n    id: 15,\n    title: 'some other todo',\n    completed: false,\n    userId: 1,\n  },\n  {\n    id: 2,\n    title: 'quis ut nam facilis et officia qui',\n    completed: false,\n    userId: 4,\n  },\n];\n","import { User } from '../../types';\n\ntype UserInfoProps = {\n  user?: User,\n};\n\nexport const UserInfo = ({ user }: UserInfoProps) => {\n  if (!user) {\n    return null;\n  }\n\n  return (\n    <a className=\"UserInfo\" href={`mailto:${user.email}`}>\n      {user.name}\n    </a>\n  );\n};\n","import cn from 'classnames';\nimport { UserInfo } from '../UserInfo';\nimport { Todo } from '../../types';\n\ninterface TodoInfoProps {\n  todo: Todo;\n  // user?: User;\n}\n\nexport const TodoInfo = ({ todo }: TodoInfoProps) => {\n  return (\n    <article\n      data-id={todo.id}\n      className={cn('TodoInfo', {\n        'TodoInfo--completed': todo.completed,\n      })}\n    >\n      <h2 className=\"TodoInfo__title\">\n        {todo.title}\n      </h2>\n      {todo.user\n      && <UserInfo user={todo.user} />}\n    </article>\n  );\n};\n","import { TodoInfo } from '../TodoInfo';\nimport { Todo } from '../../types';\n\ntype TodoListProps = {\n  todos: Todo[];\n};\n\nexport const TodoList = ({ todos }: TodoListProps) => (\n  <section className=\"TodoList\">\n    {todos.map(todo => (\n      <TodoInfo\n        key={todo.id}\n        todo={todo}\n      />\n    ))}\n  </section>\n);\n","import { ChangeEventHandler, FormEventHandler, useState } from 'react';\nimport './App.scss';\n\nimport usersFromServer from './api/users';\nimport todosFromServer from './api/todos';\nimport { TodoList } from './components/TodoList';\nimport { Todo } from './types';\n\nexport const App = () => {\n  const [selectedUserId, setSelectedUserId] = useState(0);\n  const [typedTitle, setTypedTitle] = useState('');\n  const [todosList, setTodosList] = useState(todosFromServer);\n  const [hasTitleError, setHasTitleError] = useState(false);\n  const [hasNameError, setHasNameError] = useState(false);\n\n  const handleSubmit: FormEventHandler<HTMLButtonElement> = (event) => {\n    event.preventDefault();\n\n    if (!typedTitle) {\n      setHasTitleError(true);\n    }\n\n    if (selectedUserId === 0) {\n      setHasNameError(true);\n    }\n\n    const maxId = Math.max(...todosList.map(todo => todo.id));\n\n    if (typedTitle !== '' && selectedUserId) {\n      const newTodo: Todo = {\n        id: maxId + 1,\n        title: typedTitle,\n        userId: +selectedUserId,\n        completed: false,\n      };\n\n      setTodosList((prevTodos) => [...prevTodos, newTodo]);\n      setTypedTitle('');\n      setSelectedUserId(0);\n    }\n  };\n\n  const handleChangeTitle: ChangeEventHandler<HTMLInputElement> = (event) => {\n    setTypedTitle(event.target.value);\n    setHasTitleError(false);\n  };\n\n  const handleUserChange: ChangeEventHandler<HTMLSelectElement> = (event) => {\n    setSelectedUserId(+event.target.value);\n    setHasNameError(false);\n  };\n\n  const todos = () => todosList.map(todo => ({\n    ...todo,\n    user: usersFromServer.find(u => u.id === todo.userId),\n  }));\n\n  return (\n    <div className=\"App\">\n      <h1>Add todo form</h1>\n\n      <form action=\"/api/todos\" method=\"POST\">\n        <div className=\"field\">\n          <label htmlFor=\"text\" title=\"title\">Title: </label>\n          <input\n            value={typedTitle}\n            onChange={handleChangeTitle}\n            type=\"text\"\n            data-cy=\"titleInput\"\n            title=\"title\"\n            placeholder=\"Enter a title\"\n          />\n          {hasTitleError && <span className=\"error\">Please enter a title</span>}\n        </div>\n\n        <div className=\"field\">\n          <label htmlFor=\"text\" title=\"User\">User: </label>\n          <select\n            value={selectedUserId}\n            onChange={handleUserChange}\n            data-cy=\"userSelect\"\n            title=\"User\"\n            defaultValue={0}\n          >\n\n            <option disabled value={0}>\n              Choose a user\n            </option>\n            {usersFromServer.map(user => {\n              return (\n                <option\n                  key={user.id}\n                  value={user.id}\n                >\n                  {user.name}\n                </option>\n              );\n            })}\n          </select>\n          {hasNameError\n            && <span className=\"error\">Please choose a user</span>}\n        </div>\n\n        <button type=\"submit\" data-cy=\"submitButton\" onClick={handleSubmit}>\n          Add\n        </button>\n      </form>\n\n      <TodoList todos={todos()} />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}